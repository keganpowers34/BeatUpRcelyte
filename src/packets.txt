/* DANGEROUS CLASSES (contain ByteArrayNetSerializable):
 *     ClientHelloWithCookieRequest
 *     ServerCertificateRequest
 *     AuthenticateDedicatedServerRequest
 *     CreateDedicatedServerInstanceResponse
 *     DedicatedServerPrepareForConnectionRequest
 *     HelloVerifyRequest
 *     BaseConnectToServerRequest
 *     ServerHelloRequest
 *     ClientKeyExchangeRequest
 *     CreateDedicatedServerInstanceRequest
 *     ConnectToServerResponse
 */

/* Unreliable packets:
 *     HandshakeMessageType_ClientHelloRequest
 *     HandshakeMessageType_HelloVerifyRequest
 *     HandshakeMessageType_ServerCertificateResponse
 *     HandshakeMessageType_MessageReceivedAcknowledge
 *     UserMessageType_MessageReceivedAcknowledge
 *     UserMessageType_SessionKeepaliveMessage
 *     DedicatedServerMessageType_DedicatedServerHeartbeatRequest
 *     DedicatedServerMessageType_DedicatedServerHeartbeatResponse
 *     DedicatedServerMessageType_DedicatedServerShutDownRequest
 *     DedicatedServerMessageType_MessageReceivedAcknowledge
 */

head
	#define SERIALIZE_HEAD(pkt, mtype) { \
		struct MessageHeader _message; \
		_message.type = MessageType_##mtype; \
		_message.protocolVersion = 5; \
		pkt_writeMessageHeader(pkt, _message); \
	}
	#define SERIALIZE_BODY(pkt, stype, dtype, data) { \
		fprintf(stderr, "serialize " #stype "\n"); \
		uint8_t *_end = *(pkt); \
		pkt_write##dtype(&_end, data); \
		struct SerializeHeader _serial; \
		_serial.length = _end + 1 - *(pkt); \
		_serial.type = stype; \
		pkt_writeSerializeHeader(pkt, _serial); \
		pkt_write##dtype(pkt, data); \
	}
	#define SERIALIZE(pkt, mtype, stype, dtype, data) { \
		SERIALIZE_HEAD(pkt, mtype) \
		SERIALIZE_BODY(pkt, mtype##Type_##stype, dtype, data) \
	}
	struct NetPacketHeader {
		PacketProperty property;
		uint8_t connectionNumber;
		_Bool isFragmented;
		uint16_t sequence;
		uint8_t channelId;
		uint16_t fragmentId;
		uint16_t fragmentPart;
		uint16_t fragmentsTotal;
	};
	struct ServerCode {
		uint32_t value; // 25 bit value
	};
	uint8_t pkt_readUint8(const uint8_t **pkt);
	uint16_t pkt_readUint16(const uint8_t **pkt);
	uint32_t pkt_readUint32(const uint8_t **pkt);
	uint64_t pkt_readUint64(const uint8_t **pkt);
	uint64_t pkt_readVarUint64(const uint8_t **pkt);
	uint64_t pkt_readVarUint64(const uint8_t **pkt);
	int64_t pkt_readVarInt64(const uint8_t **pkt);
	uint32_t pkt_readVarUint32(const uint8_t **pkt);
	int32_t pkt_readVarInt32(const uint8_t **pkt);
	void pkt_readUint8Array(const uint8_t **pkt, uint8_t *out, uint32_t count);
	void pkt_writeUint8(uint8_t **pkt, uint8_t v);
	void pkt_writeUint16(uint8_t **pkt, uint16_t v);
	void pkt_writeUint32(uint8_t **pkt, uint32_t v);
	void pkt_writeUint64(uint8_t **pkt, uint64_t v);
	void pkt_writeVarUint64(uint8_t **pkt, uint64_t v);
	void pkt_writeVarInt64(uint8_t **pkt, int64_t v);
	void pkt_writeVarUint32(uint8_t **pkt, uint32_t v);
	void pkt_writeVarInt32(uint8_t **pkt, int32_t v);
	#define pkt_writeInt8Array(pkt, out, count) pkt_writeUint8Array(pkt, (uint8_t*)out, count)
	void pkt_writeUint8Array(uint8_t **pkt, uint8_t *in, uint32_t count);
	struct NetPacketHeader pkt_readNetPacketHeader(const uint8_t **pkt);
	void pkt_writeNetPacketHeader(uint8_t **pkt, struct NetPacketHeader in);

code
	#include <stdio.h>
	#include <stdlib.h>
	#include <string.h>
	#include <inttypes.h>
	uint8_t pkt_readUint8(const uint8_t **pkt) {
		uint8_t v = (*pkt)[0];
		*pkt += sizeof(v);
		return v;
	}
	uint16_t pkt_readUint16(const uint8_t **pkt) {
		uint16_t v = (*pkt)[0] | (*pkt)[1] << 8;
		*pkt += sizeof(v);
		return v;
	}
	uint32_t pkt_readUint32(const uint8_t **pkt) {
		uint32_t v = (*pkt)[0] | (*pkt)[1] << 8 | (*pkt)[2] << 16 | (*pkt)[3] << 24;
		*pkt += sizeof(v);
		return v;
	}
	uint64_t pkt_readUint64(const uint8_t **pkt) {
		uint64_t v = (uint64_t)(*pkt)[0] | (uint64_t)(*pkt)[1] << 8 | (uint64_t)(*pkt)[2] << 16 | (uint64_t)(*pkt)[3] << 24 | (uint64_t)(*pkt)[4] << 32 | (uint64_t)(*pkt)[5] << 40 | (uint64_t)(*pkt)[6] << 48 | (uint64_t)(*pkt)[7] << 56;
		*pkt += sizeof(v);
		return v;
	}
	/*uint64_t pkt_readVarUint64(const uint8_t **pkt) {
		uint64_t byte, value = 0;
		uint32_t shift = 0;
		for(; (byte = (uint64_t)pkt_readUint8(pkt)) & 128; shift += 7)
			value |= (byte & 127) << shift;
		return value | byte << shift;
	}*/
	uint64_t pkt_readVarUint64(const uint8_t **pkt) {
		uint64_t byte, value = 0;
		uint8_t shift = 0;
		do {
			byte = pkt_readUint8(pkt);
			value |= (byte & 127) << shift;
			shift += 7;
		} while(byte & 128);
		return value;
	}
	int64_t pkt_readVarInt64(const uint8_t **pkt) {
		int64_t varULong = (int64_t)pkt_readVarUint64(pkt);
		if((varULong & 1L) != 1L)
			return varULong >> 1;
		return -(varULong >> 1) + 1L;
	}
	uint32_t pkt_readVarUint32(const uint8_t **pkt) {
		return (uint32_t)pkt_readVarUint64(pkt);
	}
	int32_t pkt_readVarInt32(const uint8_t **pkt) {
		return (int32_t)pkt_readVarInt64(pkt);
	}
	#define pkt_readInt8Array(pkt, out, count) pkt_readUint8Array(pkt, (uint8_t*)out, count)
	void pkt_readUint8Array(const uint8_t **pkt, uint8_t *out, uint32_t count) {
		memcpy(out, *pkt, count);
		*pkt += count;
	}
	void pkt_writeUint8(uint8_t **pkt, uint8_t v) {
		(*pkt)[0] = v;
		*pkt += sizeof(v);
	}
	void pkt_writeUint16(uint8_t **pkt, uint16_t v) {
		(*pkt)[0] = v & 255;
		(*pkt)[1] = v >> 8 & 255;
		*pkt += sizeof(v);
	}
	void pkt_writeUint32(uint8_t **pkt, uint32_t v) {
		(*pkt)[0] = v & 255;
		(*pkt)[1] = v >> 8 & 255;
		(*pkt)[2] = v >> 16 & 255;
		(*pkt)[3] = v >> 24 & 255;
		*pkt += sizeof(v);
	}
	void pkt_writeUint64(uint8_t **pkt, uint64_t v) {
		(*pkt)[0] = v & 255;
		(*pkt)[1] = v >> 8 & 255;
		(*pkt)[2] = v >> 16 & 255;
		(*pkt)[3] = v >> 24 & 255;
		(*pkt)[4] = v >> 32 & 255;
		(*pkt)[5] = v >> 40 & 255;
		(*pkt)[6] = v >> 48 & 255;
		(*pkt)[7] = v >> 56 & 255;
		*pkt += sizeof(v);
	}
	void pkt_writeVarUint64(uint8_t **pkt, uint64_t v) {
		do {
			uint8_t byte = v & 127;
			v >>= 7;
			if(v)
				byte |= 128;
			pkt_writeUint8(pkt, byte);
		} while(v);
	}
	void pkt_writeVarInt64(uint8_t **pkt, int64_t v) {
		if(v < 0)
			return pkt_writeVarUint64(pkt, (-(v + 1L) << 1) + 1L);
		pkt_writeVarUint64(pkt, v << 1);
	}
	void pkt_writeVarUint32(uint8_t **pkt, uint32_t v) {
		pkt_writeVarUint64(pkt, v);
	}
	void pkt_writeVarInt32(uint8_t **pkt, int32_t v) {
		pkt_writeVarInt64(pkt, v);
	}
	void pkt_writeUint8Array(uint8_t **pkt, uint8_t *in, uint32_t count) {
		memcpy(*pkt, in, count);
		*pkt += count;
	}
	#define pkt_logUint8(name, buf, it, v) pkt_logUint64(name, buf, it, (uint64_t)v)
	#define pkt_logUint16(name, buf, it, v) pkt_logUint64(name, buf, it, (uint64_t)v)
	#define pkt_logUint32(name, buf, it, v) pkt_logUint64(name, buf, it, (uint64_t)v)
	#define pkt_logInt32(name, buf, it, v) pkt_logInt64(name, buf, it, (int64_t)v)
	#define pkt_logVarUint64 pkt_logUint64
	#define pkt_logVarInt64 pkt_logInt64
	#define pkt_logVarUint32 pkt_logUint32
	#define pkt_logVarInt32 pkt_logInt32
	static void pkt_logUint64(const char *name, char *buf, char *it, uint64_t v) {
		fprintf(stderr, "%.*s%s=%" PRIu64 "\n", (uint32_t)(it - buf), buf, name, v);
	}
	static void pkt_logInt64(const char *name, char *buf, char *it, int64_t v) {
		fprintf(stderr, "%.*s%s=%" PRId64 "\n", (uint32_t)(it - buf), buf, name, v);
	}
	#define pkt_logInt8Array(name, buf, it, in, count) pkt_logUint8Array(name, buf, it, (uint8_t*)in, count)
	static void pkt_logUint8Array(const char *name, char *buf, char *it, uint8_t *in, uint32_t count) {
		fprintf(stderr, "%.*s%s=", (uint32_t)(it - buf), buf, name);
		for(uint32_t i = 0; i < count; ++i)
			fprintf(stderr, "%02hhx", in[i]);
		fprintf(stderr, "\n");
	}
	static const uint8_t NetPacketHeaderSize[32] = {
		1, 4, 4, 3, 11, 14, 11, 9, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	};
	struct NetPacketHeader pkt_readNetPacketHeader(const uint8_t **pkt) {
		struct NetPacketHeader out;
		uint8_t bits = pkt_readUint8(pkt);
		out.property = bits & 31;
		out.connectionNumber = bits >> 5 & 3;
		out.isFragmented = bits >> 7 & 1;
		out.sequence = (NetPacketHeaderSize[out.property] < 3) ? 0 : pkt_readUint16(pkt);
		out.channelId = (NetPacketHeaderSize[out.property] < 4) ? 0 : pkt_readUint8(pkt);
		out.fragmentId = (NetPacketHeaderSize[out.property] < 6) ? 0 : pkt_readUint16(pkt);
		out.fragmentPart = (NetPacketHeaderSize[out.property] < 8) ? 0 : pkt_readUint16(pkt);
		out.fragmentsTotal = (NetPacketHeaderSize[out.property] < 10) ? 0 : pkt_readUint16(pkt);
		return out;
	}
	void pkt_writeNetPacketHeader(uint8_t **pkt, struct NetPacketHeader in) {
		pkt_writeUint8(pkt, in.property | in.connectionNumber << 5 | in.isFragmented << 7);
		if(NetPacketHeaderSize[in.property] >= 3) pkt_writeUint16(pkt, in.sequence);
		if(NetPacketHeaderSize[in.property] >= 4) pkt_writeUint8(pkt, in.channelId);
		if(NetPacketHeaderSize[in.property] >= 6) pkt_writeUint16(pkt, in.fragmentId);
		if(NetPacketHeaderSize[in.property] >= 8) pkt_writeUint16(pkt, in.fragmentPart);
		if(NetPacketHeaderSize[in.property] >= 10) pkt_writeUint16(pkt, in.fragmentsTotal);
	}
	static struct ServerCode pkt_readServerCode(const uint8_t **pkt) {
		static const uint8_t table[128] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,25,26,27,28,0,29,30,31,0,0,0,0,0,0,0,0,1,2,3,4,5,6,7,0,8,9,10,11,12,0,13,14,15,16,17,18,19,20,21,22,23,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
		struct ServerCode out = {0};
		struct String scode = pkt_readString(pkt);
		for(uint32_t i = 0; i < 5; ++i, out.value <<= 5)
			out.value |= table[scode.data[i] & 127];
		if(scode.length != 5)
			out.value = 0xffffffff;
		return out;
	}
	static void pkt_writeServerCode(uint8_t **pkt, struct ServerCode in) {
		struct String scode = {.length = 5};
		for(uint32_t i = 0, code = in.value; i < 5; ++i, code >>= 5)
			scode.data[i] = "ABCDEFGHJKLMNPQRSTUVWXYZ12345789"[code & 31];
		pkt_writeString(pkt, scode);
	}
	static void pkt_logServerCode(const char *name, char *buf, char *it, struct ServerCode in) {
		fprintf(stderr, "%.*s%s=\"", (uint32_t)(it - buf), buf, name);
		for(uint32_t i = 0, code = in.value; i < 5; ++i, code >>= 5)
			fprintf(stderr, "%c", "ABCDEFGHJKLMNPQRSTUVWXYZ12345789"[code & 31]);
		fprintf(stderr, "\"\n");
	}

u8 PacketProperty
	z Unreliable
	z Channeled
	z Ack
	z Ping
	z Pong
	z ConnectRequest
	z ConnectAccept
	z Disconnect
	z UnconnectedMessage
	z MtuCheck
	z MtuOk
	z Broadcast
	z Merged
	z ShutdownOk
	z PeerNotFound
	z InvalidProtocol
	z NatMessage
	z Empty
u8 Platform
	z Test
	z OculusRift
	z OculusQuest
	z Steam
	z PS4
	z PS4Dev
	z PS4Cert
	z Oculus 1
d PacketEncryptionLayer
	b encrypted
	if(encrypted == 1)
		u32 sequenceId
		u8[16] iv
d MessageHeader
	u32.MessageType type
	vu32 protocolVersion
d SerializeHeader
	vu32 length
	u8 type
d BaseMasterServerReliableRequest
	u32 requestId
d BaseMasterServerResponse
	u32 responseId
d BaseMasterServerReliableResponse
	u32 requestId
	u32 responseId
d BaseMasterServerAcknowledgeMessage
	BaseMasterServerResponse base
	b messageHandled
d ByteArrayNetSerializable
	vu32 length
	u8[length,4096] data
code
	static void pkt_logString(const char *name, char *buf, char *it, struct String in) {
		fprintf(stderr, "%.*s%s=\"%.*s\"\n", (uint32_t)(it - buf), buf, name, in.length, in.data);
	}
d String
	u32 length
	c[length,4096] data
r AuthenticationToken
	u8.Platform platform
	String userId
	String userName
	ByteArrayNetSerializable sessionToken
s BaseMasterServerMultipartMessage
	BaseMasterServerReliableRequest base
	u32 multipartMessageId
	vu32 offset
	vu32 length
	vu32 totalLength
	u8[length,384] data
d BitMask128
	u64 _d0
	u64 _d1
d SongPackMask
	BitMask128 _bloomFilter
u8 BeatmapDifficultyMask
	v Easy 1
	v Normal 2
	v Hard 4
	v Expert 8
	v ExpertPlus 16
	v All 31
u32 GameplayModifierMask
	v None 0
	v BatteryEnergy 1
	v NoFail 2
	v InstaFail 4
	v NoObstacles 8
	v NoBombs 16
	v FastNotes 32
	v StrictAngles 64
	v DisappearingArrows 128
	v FasterSong 256
	v SlowerSong 512
	v NoArrows 1024
	v GhostNotes 2048
	v SuperFastSong 4096
	v ProMode 8192
	v ZenMode 16384
	v SmallCubes 32768
	v All 65535
d BeatmapLevelSelectionMask
	u8.BeatmapDifficultyMask difficulties
	u32.GameplayModifierMask modifiers
	SongPackMask songPacks
u8 DiscoveryPolicy
	v Hidden
	v WithCode
	v Public
u8 InvitePolicy
	v OnlyConnectionOwnerCanInvite
	v AnyoneCanInvite
	v NobodyCanInvite
u8 GameplayServerMode
	v Countdown
	v Managed
	v QuickStartOneSong
u8 SongSelectionMode
	v Vote
	v Random
	v OwnerPicks
	v RandomPlayerPicks
u8 GameplayServerControlSettings
	v None 0
	v AllowModifierSelection 1
	v AllowSpectate 2
	v All 3
d GameplayServerConfiguration
	vi32 maxPlayerCount
	vi32.DiscoveryPolicy discoveryPolicy
	vi32.InvitePolicy invitePolicy
	vi32.GameplayServerMode gameplayServerMode
	vi32.SongSelectionMode songSelectionMode
	vi32.GameplayServerControlSettings gameplayServerControlSettings
s PublicServerInfo
	ServerCode code
	vi32 currentPlayerCount
d IPEndPoint
	String address
	u32 port
u8 AuthenticateUserResponse_Result
	v Success
	v Failed
	v UnknownError
u8 ConnectToServerResponse_Result
	v Success
	v InvalidSecret
	v InvalidCode
	v InvalidPassword
	v ServerAtCapacity
	v NoAvailableDedicatedServers
	v VersionMismatch
	v ConfigMismatch
	v UnknownError
u8 GetPublicServersResponse_Result
	v Success
	v UnknownError
u32 Message Type 0
	u8 UserMessage Type 1
		r AuthenticateUserRequest
			BaseMasterServerReliableResponse base
			AuthenticationToken authenticationToken
		s AuthenticateUserResponse
			BaseMasterServerReliableResponse base
			u8.AuthenticateUserResponse_Result result
		s ConnectToServerResponse 8
			BaseMasterServerReliableResponse base
			u8.ConnectToServerResponse_Result result
			if(result == GetPublicServersResponse_Result_Success)
				String userId
				String userName
				String secret
				BeatmapLevelSelectionMask selectionMask
				u8 flags
				IPEndPoint remoteEndPoint
				u8[32] random
				ByteArrayNetSerializable publicKey
				String code
				GameplayServerConfiguration configuration
				String managerId
		d ConnectToServerRequest
		d UserMessageReceivedAcknowledge 13
			BaseMasterServerAcknowledgeMessage base
		s UserMultipartMessage
			BaseMasterServerMultipartMessage base
		d SessionKeepaliveMessage
		r GetPublicServersRequest
			BaseMasterServerReliableRequest base
			String userId
			String userName
			vi32 offset
			vi32 count
			BeatmapLevelSelectionMask selectionMask
			GameplayServerConfiguration configuration
		s GetPublicServersResponse
			BaseMasterServerReliableResponse base
			u8.GetPublicServersResponse_Result result
			if(result == GetPublicServersResponse_Result_Success)
				vu32 publicServerCount
				PublicServerInfo[publicServerCount,16384] publicServers
	u8 DedicatedServerMessage Type 2
		r AuthenticateDedicatedServerRequest
			BaseMasterServerReliableResponse base
			String dedicatedServerId
			u8[16] nonce
			u8[32] hash
			u64 timestamp
		d AuthenticateDedicatedServerResponse
		r CreateDedicatedServerInstanceRequest 4
			BaseMasterServerReliableRequest base
			String secret
			BeatmapLevelSelectionMask selectionMask
			String userId
			String userName
			IPEndPoint userEndPoint
			u8[32] userRandom
			ByteArrayNetSerializable userPublicKey
			GameplayServerConfiguration configuration
		d CreateDedicatedServerInstanceResponse
		d DedicatedServerInstanceNoLongerAvailableRequest
		d DedicatedServerHeartbeatRequest
		d DedicatedServerHeartbeatResponse
		d DedicatedServerInstanceStatusUpdateRequest 10
		d DedicatedServerShutDownRequest
		d DedicatedServerPrepareForConnectionRequest
		d DedicatedServerMessageReceivedAcknowledge
			BaseMasterServerAcknowledgeMessage base
		s DedicatedServerMultipartMessage
			BaseMasterServerMultipartMessage base
		d DedicatedServerPrepareForConnectionResponse
	u8 HandshakeMessage Type 3192347326
		r ClientHelloRequest
			BaseMasterServerReliableRequest base
			u8[32] random
		s HelloVerifyRequest
			BaseMasterServerReliableResponse base
			u8[32] cookie
		r ClientHelloWithCookieRequest
			BaseMasterServerReliableRequest base
			u32 certificateResponseId
			u8[32] random
			u8[32] cookie
		s ServerHelloRequest
			BaseMasterServerReliableResponse base
			u8[32] random
			ByteArrayNetSerializable publicKey
			ByteArrayNetSerializable signature
		s ServerCertificateRequest
			BaseMasterServerReliableResponse base
			vu32 certificateCount
			ByteArrayNetSerializable[certificateCount,10] certificateList
		r ServerCertificateResponse
		r ClientKeyExchangeRequest
			BaseMasterServerReliableResponse base
			ByteArrayNetSerializable clientPublicKey
		s ChangeCipherSpecRequest
			BaseMasterServerReliableResponse base
		d HandshakeMessageReceivedAcknowledge
			BaseMasterServerAcknowledgeMessage base
		s HandshakeMultipartMessage
			BaseMasterServerMultipartMessage base
